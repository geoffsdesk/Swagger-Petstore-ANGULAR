/**
  *SwaggerPetstoreLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
  */

'use strict';
angular.module('SwaggerPetstoreLib').factory('PetController',function($q,Configuration,HttpClient,APIHelper,ApiResponse,Pet){
    return{
        /**
         * uploads an image
         * @param {long} petId    Required parameter: ID of pet to update
         * @param {string|null} additionalMetadata    Optional parameter: Additional data to pass to server
         * @param {string|null} file    Optional parameter: file to upload
         *
         * @return {promise<ApiResponse>}
         */
        uploadFile : function(petId, additionalMetadata, file){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/{petId}/uploadImage";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "petId" : petId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare form data
            var _formDataDictionary = {
                "additionalMetadata" : additionalMetadata,
                "file" : file
            };

            //Remove null values
            APIHelper.cleanObject(_formDataDictionary);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                formData : _formDataDictionary,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = new ApiResponse(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
            });
            
            return _deffered.promise;
        },
        /**
         * Deletes a pet
         * @param {long} petId    Required parameter: Pet id to delete
         * @param {string|null} apiKey    Optional parameter: Example: 
         *
         * @return {promise<void>}
         */
        deletePet : function(petId, apiKey){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/{petId}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "petId" : petId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "api_key" : apiKey,
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "DELETE",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid ID supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Pet not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Find pet by ID
         * @param {long} petId    Required parameter: ID of pet to return
         *
         * @return {promise<Pet>}
         */
        getPetById : function(petId){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/{petId}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "petId" : petId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = new Pet(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid ID supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Pet not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Finds Pets by tags
         * @param {array} tags    Required parameter: Tags to filter by
         *
         * @return {promise<array>}
         */
        findPetsByTags : function(tags){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/findByTags";
            
            //Process query parameters
            _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                "tags" : tags
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = _strResult = _strResult.map(function(model){
                   return new Pet(model);
               });
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid tag value", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Updates a pet in the store with form data
         * @param {long} petId    Required parameter: ID of pet that needs to be updated
         * @param {string|null} name    Optional parameter: Updated name of the pet
         * @param {string|null} status    Optional parameter: Updated status of the pet
         *
         * @return {promise<void>}
         */
        updatePetWithForm : function(petId, name, status){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/{petId}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "petId" : petId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare form data
            var _form = {
                "name" : name,
                "status" : status
            };

            //Remove null values
            APIHelper.cleanObject(_form);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                form : _form,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 405) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid input", errorCode: 405, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Finds Pets by status
         * @param {array} status    Required parameter: Status values that need to be considered for filter
         *
         * @return {promise<array>}
         */
        findPetsByStatus : function(status){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet/findByStatus";
            
            //Process query parameters
            _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                "status" : (status != null)?status:null
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = _strResult = _strResult.map(function(model){
                   return new Pet(model);
               });
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid status value", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Update an existing pet
         * @param {Pet} body    Required parameter: Pet object that needs to be added to the store
         *
         * @return {promise<void>}
         */
        updatePet : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "PUT",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid ID supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Pet not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 405) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Validation exception", errorCode: 405, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Add a new pet to the store
         * @param {Pet} body    Required parameter: Pet object that needs to be added to the store
         *
         * @return {promise<void>}
         */
        addPet : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/pet";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 405) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid input", errorCode: 405, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        }
    }
});