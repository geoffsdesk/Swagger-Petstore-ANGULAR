/**
  *SwaggerPetstoreLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
  */

'use strict';
angular.module('SwaggerPetstoreLib').factory('UserController',function($q,Configuration,HttpClient,APIHelper,User){
    return{
        /**
         * Get user by user name
         * @param {string} username    Required parameter: The name that needs to be fetched. Use user1 for testing.
         *
         * @return {promise<User>}
         */
        getUserByName : function(username){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/{username}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "username" : username
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = new User(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid username supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "User not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Delete user
         * @param {string} username    Required parameter: The name that needs to be deleted
         *
         * @return {promise<void>}
         */
        deleteUser : function(username){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/{username}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "username" : username
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "DELETE",
                queryUrl : _queryUrl,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid username supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "User not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Logs out current logged in user session
         *
         * @return {promise<void>}
         */
        getLogoutUser : function(){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/logout";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 500) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "successful operation", errorCode: 500, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Creates list of users with given input array
         * @param {array} body    Required parameter: List of user object
         *
         * @return {promise<void>}
         */
        createUsersWithListInput : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/createWithList";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 500) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "successful operation", errorCode: 500, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Creates list of users with given input array
         * @param {array} body    Required parameter: List of user object
         *
         * @return {promise<void>}
         */
        createUsersWithArrayInput : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/createWithArray";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 500) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "successful operation", errorCode: 500, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Logs user into the system
         * @param {string} username    Required parameter: The user name for login
         * @param {string} password    Required parameter: The password for login in clear text
         *
         * @return {promise<string>}
         */
        getLoginUser : function(username, password){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/login";
            
            //Process query parameters
            _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                "username" : username,
                "password" : password
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid username/password supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Create user
         * @param {User} body    Required parameter: Created user object
         *
         * @return {promise<void>}
         */
        createUser : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 500) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "successful operation", errorCode: 500, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Updated user
         * @param {string} username    Required parameter: name that need to be updated
         * @param {User} body    Required parameter: Updated user object
         *
         * @return {promise<void>}
         */
        updateUser : function(username, body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/user/{username}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "username" : username
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "PUT",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid user supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "User not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        }
    }
});