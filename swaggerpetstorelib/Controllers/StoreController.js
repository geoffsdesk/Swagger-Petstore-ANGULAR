/**
  *SwaggerPetstoreLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/15/2016
  */

'use strict';
angular.module('SwaggerPetstoreLib').factory('StoreController',function($q,Configuration,HttpClient,APIHelper,Order){
    return{
        /**
         * Delete purchase order by ID
         * @param {long} orderId    Required parameter: ID of the order that needs to be deleted
         *
         * @return {promise<void>}
         */
        deleteOrder : function(orderId){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/store/order/{orderId}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "orderId" : orderId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "DELETE",
                queryUrl : _queryUrl,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid ID supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Order not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Find purchase order by ID
         * @param {long} orderId    Required parameter: ID of pet that needs to be fetched
         *
         * @return {promise<Order>}
         */
        getOrderById : function(orderId){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/store/order/{orderId}";
            
            //Process template parameters
            _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                "orderId" : orderId
            });

            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = new Order(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid ID supplied", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else if (_result.code == 404) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Order not found", errorCode: 404, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Place an order for a pet
         * @param {Order} body    Required parameter: order placed for purchasing the pet
         *
         * @return {promise<Order>}
         */
        createPlaceOrder : function(body){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/store/order";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "POST",
                queryUrl : _queryUrl,
                headers: _headers,
                body : body
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = new Order(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                if (_result.code == 400) {
                    _deffered.reject(APIHelper.appendContext({errorMessage: "Invalid Order", errorCode: 400, errorResponse: _result.message},_result.getContext()));
                } else {
                    _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
                }
            });
            
            return _deffered.promise;
        },
        /**
         * Returns pet inventories by status
         *
         * @return {promise<mixed>}
         */
        getInventory : function(){

            //Create promise to return
            var _deffered= $q.defer();
            
            //prepare query string for API call
            var _baseUri = Configuration.BASEURI
            var _queryBuilder = _baseUri + "/store/inventory";
            
            //validate and preprocess url
            var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
            
            //prepare headers
            var _headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var _config = {
                method : "GET",
                queryUrl : _queryUrl,
                headers: _headers,
            };
            
            var _response = HttpClient(_config);
            
            //process response
            _response.then(function(_result){
                var _strResult =_result.body;
            	_result.body = JSON.parse(_strResult);
                _deffered.resolve(_result);
            },function(_result){
                //Error handling for custom HTTP status codes
                _deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: _result.code, errorResponse: _result.message},_result.getContext()));
            });
            
            return _deffered.promise;
        }
    }
});